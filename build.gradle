import java.beans.PropertyChangeSupport

plugins {
	id 'java'
	id 'application'
}

application {
	mainClass.set("com.gmail.berndivader.streamserver.YAMPB")
}

repositories {
    mavenCentral()
  	maven {
    	url 'https://m2.dv8tion.net/releases'
  	}
  	maven {
  		url 'https://jitpack.io'
  	}  	
}

configurations {
    compileClasspath.extendsFrom(supplied)
}

java {
	toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

dependencies {
	supplied 'com.github.kokorin.jaffree:jaffree:2024.08.29'
	supplied 'org.slf4j:slf4j-api:+'
    supplied 'mysql:mysql-connector-java:8.0.33'
    supplied 'com.google.code.gson:gson:2.11.0'
    supplied 'org.slf4j:slf4j-nop:+'
    supplied 'com.discord4j:discord4j-core:3.2.6'
    supplied 'org.apache.httpcomponents:httpclient:4.3.4'
    supplied 'com.github.devoxin:lavaplayer:1.9.1'
}

if(hasProperty('buildScan')) {
	buildScan {
		termsOfServiceUrl = 'https://gradle.com/terms-of-service'
		termsOfServiceAgree = 'yes'
	}
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    rootSpec.exclude('**/META-INF/*.SF','**/META-INF/*.RSA')
    
    manifest {
        attributes 'Main-Class': application.mainClass
    }

    from {
        configurations.supplied.asFileTree.files.collect { zipTree(it) }
    }
}

task debug(type:DefaultTask,group:'Build') {
	dependsOn 'build'
	doLast {
		File file=file('debug.properties')
		Properties props=new Properties()
		file.withInputStream{props.load(it)}
		
		long build=Long.parseLong(props.getProperty('build'))
		build++
		
		props.setProperty('build',Long.toString(build))
		file.withOutputStream{props.store(it,null)}
		
		File jf=jar.archiveFile.get().getAsFile()
		String name=jf.getName().replace(".jar","-debug-build"+props.getProperty('build')+".jar")
		jf.renameTo(new File(jf.getParent(),name));
	}
}
